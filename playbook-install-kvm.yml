---
- name: Install KVM, Virtualization Tools, and HPE VM Package
  hosts: azure_vms
  become: yes
  gather_facts: yes

  vars:
    kvm_packages:
      - qemu-kvm
      - qemu-block-extra
      - libvirt-daemon-system
      - libvirt-clients
      - virtinst
      - genisoimage
      - apparmor-utils
      - ceph-common
      - libvirt-daemon-driver-storage-rbd
      - nfs-common
      - gfs2-utils
      - corosync
      - dlm-controld
      - ceph
      - openvswitch-switch
      - pacemaker
      - pcs
      - resource-agents-extra
      - fence-agents-base
      - iptables-persistent
      - netfilter-persistent
    hpe_vm_deb_local: "hpe-vm_1.0.11-1_amd64.deb"
    hpe_vm_deb_remote: "/tmp/hpe-vm_1.0.11-1_amd64.deb"
    hpe_qcow_local: "hpe-vm-essentials-8.0.10-1.qcow2.gz"
    hpe_qcow_remote: "/tmp/hpe-vm-essentials-8.0.10-1.qcow2.gz"

  tasks:
    - name: Ensure openssh-server is installed
      ansible.builtin.apt:
        name: openssh-server
        state: present
        update_cache: yes
        cache_valid_time: 3600

    - name: Enable password authentication in sshd_config
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication\s+'
        line: 'PasswordAuthentication yes'
        state: present
        backup: yes

    - name: Ensure ChallengeResponseAuthentication is disabled (for clarity)
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?ChallengeResponseAuthentication\s+'
        line: 'ChallengeResponseAuthentication no'
        state: present

    - name: Ensure UsePAM is enabled (required for password auth)
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?UsePAM\s+'
        line: 'UsePAM yes'
        state: present

    - name: Restart sshd to apply changes
      ansible.builtin.systemd:
        name: ssh
        state: restarted
        enabled: yes

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install KVM and virtualization packages
      ansible.builtin.apt:
        name: "{{ kvm_packages }}"
        state: present
      register: apt_install_result

    - name: Upload HPE VM deb package to remote host
      ansible.builtin.copy:
        src: "{{ hpe_vm_deb_local }}"
        dest: "{{ hpe_vm_deb_remote }}"
        mode: '0644'

    - name: Install HPE VM package
      ansible.builtin.apt:
        deb: "{{ hpe_vm_deb_remote }}"
        state: present

    - name: Ensure libvirt service is started and enabled
      ansible.builtin.systemd:
        name: libvirtd
        state: started
        enabled: yes

    - name: Add admin user to libvirt group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: libvirt
        append: yes

    - name: Verify KVM installation
      ansible.builtin.command: kvm-ok
      register: kvm_ok_result
      failed_when: false
      changed_when: false

    - name: Display KVM verification result
      ansible.builtin.debug:
        msg: "{{ kvm_ok_result.stdout_lines }}"

    # Configure Static IPs in netplan
    - name: Set static IP variables based on hostname
      ansible.builtin.set_fact:
        eth0_ip: "{{ '10.0.2.5/24' if 'vme-kvm-vm1' in inventory_hostname else '10.0.2.4/24' }}"
        eth1_ip: "{{ '10.0.1.10/24' if 'vme-kvm-vm1' in inventory_hostname else '10.0.1.11/24' }}"
        gateway: "10.0.2.1"
        nameservers: "168.63.129.16"

    - name: Backup original netplan configuration
      ansible.builtin.copy:
        src: /etc/netplan/50-cloud-init.yaml
        dest: /etc/netplan/50-cloud-init.yaml.bak
        remote_src: yes
        force: no

    - name: Configure netplan with static IPs (before OVS bridge creation)
      ansible.builtin.template:
        src: netplan-static.yaml.j2
        dest: /etc/netplan/50-cloud-init.yaml
        mode: '0600'
        backup: yes
      register: netplan_config

    - name: Apply netplan configuration for static IPs
      ansible.builtin.command: netplan apply
      when: netplan_config.changed

    # OVS Bridge Configuration for nested VM networking
    - name: Check if OVS mgmt bridge exists
      ansible.builtin.shell: ovs-vsctl list-br | grep -q '^mgmt$'
      register: mgmt_bridge_exists
      failed_when: false
      changed_when: false

    - name: Delete mgmt bridge if it exists (for clean state)
      ansible.builtin.command: ovs-vsctl --if-exists del-br mgmt
      when: mgmt_bridge_exists.rc == 0

    - name: Create OVS mgmt bridge
      ansible.builtin.command: ovs-vsctl add-br mgmt
      register: bridge_created

    - name: Check if eth1 is already a port of mgmt bridge
      ansible.builtin.shell: ovs-vsctl list-ports mgmt 2>/dev/null | grep -q '^eth1$'
      register: eth1_in_bridge
      failed_when: false
      changed_when: false

    - name: Add eth1 port to mgmt bridge if not already added
      ansible.builtin.command: ovs-vsctl add-port mgmt eth1
      when: eth1_in_bridge.rc != 0
      register: port_added

    - name: Flush IP address from eth1 when adding to bridge
      ansible.builtin.command: ip addr flush dev eth1
      when: port_added.changed

    - name: Check current IP on mgmt bridge
      ansible.builtin.shell: ip addr show mgmt | grep -q '{{ eth1_ip }}'
      register: mgmt_has_ip
      failed_when: false
      changed_when: false

    - name: Assign IP address to mgmt bridge if not present
      ansible.builtin.command: ip addr add {{ eth1_ip }} dev mgmt
      when: mgmt_has_ip.rc != 0

    - name: Ensure mgmt bridge is up
      ansible.builtin.command: ip link set mgmt up
      when: bridge_created.changed or port_added.changed

    - name: Update netplan configuration with OVS bridge
      ansible.builtin.template:
        src: netplan-with-ovs.yaml.j2
        dest: /etc/netplan/50-cloud-init.yaml
        mode: '0600'
        backup: yes
      register: netplan_ovs_config

    - name: Apply netplan configuration for mgmt bridge
      ansible.builtin.command: netplan apply
      when: netplan_ovs_config.changed

    # Configure nested VM routing
    - name: Copy nested VM routes setup script
      ansible.builtin.copy:
        src: setup-nested-vm-routes.sh
        dest: /tmp/setup-nested-vm-routes.sh
        mode: '0755'

    - name: Configure nested VM routes
      ansible.builtin.command: /tmp/setup-nested-vm-routes.sh
      register: routes_result
      changed_when: '"Adding route" in routes_result.stdout'

    # Configure NAT for nested VM internet access
    - name: Copy NAT setup script for nested VMs
      ansible.builtin.copy:
        src: setup-nested-vm-nat.sh
        dest: /tmp/setup-nested-vm-nat.sh
        mode: '0755'

    - name: Configure NAT for nested VM internet access
      ansible.builtin.command: /tmp/setup-nested-vm-nat.sh
      register: nat_result
      changed_when: '"Added MASQUERADE" in nat_result.stdout'

    # Note: Using iptables-persistent instead of UFW to preserve libvirt rules
    # The NAT and routing scripts already configure necessary iptables rules
    - name: Save current iptables rules
      ansible.builtin.command: netfilter-persistent save
      changed_when: false

    - name: Tasks for the first Host
      when: '"vme-kvm-vm1" in inventory_hostname'
      block: 
        - name: Uploading HPE VM Essentials Disk to remote host
          ansible.builtin.copy:
            src: "{{ hpe_qcow_local }}"
            dest: "{{ hpe_qcow_remote }}"
            mode: '0644'
