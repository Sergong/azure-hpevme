---
# Unit tests for OVS bridge configuration in playbook-install-kvm.yml
# Test Case 4: Verify that the Ansible playbook correctly configures the OVS mgmt bridge and moves the IP address from eth1 to mgmt

- name: Test OVS Bridge Configuration
  hosts: localhost
  gather_facts: no
  
  tasks:
    # Test 1: Verify OVS bridge check command
    - name: Test OVS bridge exists check command format
      ansible.builtin.set_fact:
        ovs_check_cmd: "ovs-vsctl br-exists mgmt"
      
    - name: Assert OVS check command is correct
      ansible.builtin.assert:
        that:
          - ovs_check_cmd == "ovs-vsctl br-exists mgmt"
        fail_msg: "OVS bridge check command is incorrect"
        success_msg: "OVS bridge check command is correct"

    # Test 2: Verify IP extraction from eth1
    - name: Test IP extraction regex pattern
      ansible.builtin.set_fact:
        test_eth1_output: |
          2: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500
              inet 10.0.1.10/24 brd 10.0.1.255 scope global eth1
        ip_regex: "(?<=inet\\s)\\d+(\\.\\d+){3}/\\d+"
      
    - name: Extract IP using the playbook's regex
      ansible.builtin.shell: |
        echo "{{ test_eth1_output }}" | grep -oP '{{ ip_regex }}' | head -1
      register: extracted_ip
      changed_when: false
      
    - name: Assert IP extraction works correctly
      ansible.builtin.assert:
        that:
          - extracted_ip.stdout == "10.0.1.10/24"
        fail_msg: "IP extraction regex failed"
        success_msg: "IP extraction regex works correctly"

    # Test 3: Verify OVS bridge creation command
    - name: Test OVS bridge creation command
      ansible.builtin.set_fact:
        bridge_create_cmd: "ovs-vsctl add-br mgmt"
      
    - name: Assert bridge creation command is correct
      ansible.builtin.assert:
        that:
          - bridge_create_cmd == "ovs-vsctl add-br mgmt"
        fail_msg: "Bridge creation command is incorrect"
        success_msg: "Bridge creation command is correct"

    # Test 4: Verify port addition to bridge
    - name: Test port addition command
      ansible.builtin.set_fact:
        port_add_cmd: "ovs-vsctl add-port mgmt eth1"
      
    - name: Assert port addition command is correct
      ansible.builtin.assert:
        that:
          - port_add_cmd == "ovs-vsctl add-port mgmt eth1"
        fail_msg: "Port addition command is incorrect"
        success_msg: "Port addition command is correct"

    # Test 5: Verify IP assignment to bridge
    - name: Test IP assignment command format
      ansible.builtin.set_fact:
        test_ip: "10.0.1.10/24"
        ip_assign_cmd: "ip addr add {{ test_ip }} dev mgmt"
      
    - name: Assert IP assignment command is correct
      ansible.builtin.assert:
        that:
          - ip_assign_cmd == "ip addr add 10.0.1.10/24 dev mgmt"
        fail_msg: "IP assignment command is incorrect"
        success_msg: "IP assignment command is correct"

    # Test 6: Verify IP flush from eth1
    - name: Test IP flush command
      ansible.builtin.set_fact:
        ip_flush_cmd: "ip addr flush dev eth1"
      
    - name: Assert IP flush command is correct
      ansible.builtin.assert:
        that:
          - ip_flush_cmd == "ip addr flush dev eth1"
        fail_msg: "IP flush command is incorrect"
        success_msg: "IP flush command is correct"

    # Test 7: Verify bridge bring up command
    - name: Test bridge bring up command
      ansible.builtin.set_fact:
        bridge_up_cmd: "ip link set mgmt up"
      
    - name: Assert bridge bring up command is correct
      ansible.builtin.assert:
        that:
          - bridge_up_cmd == "ip link set mgmt up"
        fail_msg: "Bridge bring up command is incorrect"
        success_msg: "Bridge bring up command is correct"

    # Test 8: Verify netplan configuration update
    - name: Test netplan regex replacement
      ansible.builtin.set_fact:
        netplan_regexp: 'eth1'
        netplan_replace: 'mgmt'
        netplan_path: '/etc/netplan/50-cloud-init.yaml'
      
    - name: Assert netplan configuration parameters are correct
      ansible.builtin.assert:
        that:
          - netplan_regexp == 'eth1'
          - netplan_replace == 'mgmt'
          - netplan_path == '/etc/netplan/50-cloud-init.yaml'
        fail_msg: "Netplan configuration parameters are incorrect"
        success_msg: "Netplan configuration parameters are correct"

    # Test 9: Verify netplan apply command
    - name: Test netplan apply command
      ansible.builtin.set_fact:
        netplan_apply_cmd: "netplan apply"
      
    - name: Assert netplan apply command is correct
      ansible.builtin.assert:
        that:
          - netplan_apply_cmd == "netplan apply"
        fail_msg: "Netplan apply command is incorrect"
        success_msg: "Netplan apply command is correct"

    # Test 10: Verify task execution order and conditions
    - name: Test task conditional execution
      ansible.builtin.set_fact:
        mgmt_bridge_exists_rc: 1  # Non-zero means bridge doesn't exist
        test_conditions:
          - condition: "{{ mgmt_bridge_exists_rc != 0 }}"
            description: "Tasks should run when bridge doesn't exist"
      
    - name: Assert conditional logic is correct
      ansible.builtin.assert:
        that:
          - test_conditions[0].condition == true
        fail_msg: "Conditional logic for bridge creation is incorrect"
        success_msg: "Conditional logic for bridge creation is correct"

    # Test 11: Verify OVS bridge name consistency
    - name: Test bridge name consistency across tasks
      ansible.builtin.set_fact:
        bridge_names:
          - "mgmt"
          - "mgmt"
          - "mgmt"
          - "mgmt"
      
    - name: Assert all tasks use the same bridge name
      ansible.builtin.assert:
        that:
          - bridge_names | unique | length == 1
          - bridge_names | unique | first == "mgmt"
        fail_msg: "Bridge name is not consistent across tasks"
        success_msg: "Bridge name is consistent across all tasks"

    # Test 12: Verify interface name is eth1
    - name: Test interface name
      ansible.builtin.set_fact:
        interface_name: "eth1"
      
    - name: Assert interface name is eth1
      ansible.builtin.assert:
        that:
          - interface_name == "eth1"
        fail_msg: "Interface name should be eth1"
        success_msg: "Interface name is correct (eth1)"

    # Test 13: Verify IP address preservation
    - name: Test IP address variable usage
      ansible.builtin.set_fact:
        eth1_ip_var: "{{ eth1_ip.stdout }}"
        expected_usage: "ip addr add {{ eth1_ip.stdout }} dev mgmt"
      when: eth1_ip is defined and eth1_ip.stdout is defined
      
    - name: Mock eth1_ip for testing
      ansible.builtin.set_fact:
        eth1_ip:
          stdout: "10.0.1.10/24"
      
    - name: Assert IP variable is used correctly
      ansible.builtin.assert:
        that:
          - eth1_ip.stdout is defined
        fail_msg: "eth1_ip variable should be defined for IP assignment"
        success_msg: "IP address variable is correctly captured and used"

    # Test 14: Verify changed_when condition for route configuration
    - name: Test changed_when logic for routes
      ansible.builtin.set_fact:
        routes_result_with_adding:
          stdout: "Adding route: 10.0.1.48/28 via 10.0.1.11"
        routes_result_without_adding:
          stdout: "Route for 10.0.1.48/28 already exists"
      
    - name: Assert changed_when detects new routes
      ansible.builtin.assert:
        that:
          - '"Adding route" in routes_result_with_adding.stdout'
          - '"Adding route" not in routes_result_without_adding.stdout'
        fail_msg: "changed_when condition for routes is incorrect"
        success_msg: "changed_when condition correctly detects route additions"

    # Test 15: Verify all OVS tasks are conditional
    - name: Test that OVS configuration tasks are conditional
      ansible.builtin.set_fact:
        ovs_tasks_conditions:
          - "mgmt_bridge_exists.rc != 0"
          - "mgmt_bridge_exists.rc != 0"
          - "mgmt_bridge_exists.rc != 0 and eth1_ip.stdout is defined"
          - "mgmt_bridge_exists.rc != 0"
          - "mgmt_bridge_exists.rc != 0"
          - "mgmt_bridge_exists.rc != 0"
          - "mgmt_bridge_exists.rc != 0"
      
    - name: Assert all OVS tasks have proper conditions
      ansible.builtin.assert:
        that:
          - ovs_tasks_conditions | length == 7
          - ovs_tasks_conditions | select('search', 'mgmt_bridge_exists.rc') | list | length == 7
        fail_msg: "Not all OVS tasks are properly conditional"
        success_msg: "All OVS tasks have proper conditional execution"
